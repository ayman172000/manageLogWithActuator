i// draggable-window.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-draggable-window',
  template: `
    <div class="draggable-window">
      <p>Draggable Window Content</p>
    </div>
  `,
  styles: [`
    .draggable-window {
      width: 100%;
      height: 100%;
      cursor: move;
    }
  `]
})
export class DraggableWindowComponent { }






// app.component.ts
import { Component } from '@angular/core';
import { NbWindowService } from '@nebular/theme';
import { DraggableWindowComponent } from './draggable-window/draggable-window.component';

@Component({
  selector: 'app-root',
  template: `<button (click)="openWindow()">Open Draggable Window</button>`,
})
export class AppComponent {
  constructor(private windowService: NbWindowService) {}

  openWindow() {
    this.windowService.open(DraggableWindowComponent, { title: 'Draggable Window' });
  }
}






import { Component, OnInit, ViewChild, ViewContainerRef, Renderer2, ComponentFactoryResolver } from '@angular/core';
import { MyDirectiveDirective } from './my-directive.directive';

@Component({
  selector: 'app-root',
  template: `<div #directiveContainer>Hover over me to see the directive in action!</div>`,
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  @ViewChild('directiveContainer', { read: ViewContainerRef, static: true }) container!: ViewContainerRef;

  constructor(
    private renderer: Renderer2,
    private resolver: ComponentFactoryResolver
  ) {}

  ngOnInit() {
    // Create a component reference to the directive
    const directiveFactory = this.resolver.resolveComponentFactory(MyDirectiveDirective);

    // Attach the directive to the container
    const directiveRef = this.container.createComponent(directiveFactory);

    // Apply the directive to the native element
    this.renderer.appendChild(this.container.element.nativeElement, directiveRef.location.nativeElement);
  }
}




